package proyectopila;

import static java.lang.Character.isDigit;
import static java.lang.String.valueOf;
import java.util.ArrayList;

/**
 * Esta clase imita la funcionalidad de una calculadora con una interfaz grafica
 * amigable para el usuario
 * @author Jerusa Chavero González
 * @author Marian Shanti Sánchez Barbero
 * @author Regina Vázquez Santa María López
 * @author Damián Pérez Landeros
 */
public class CalculadoraVisual extends javax.swing.JFrame {

    /**
     * Constructor vacio
     */
    public CalculadoraVisual() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jbAC = new javax.swing.JButton();
        jbParentesis1 = new javax.swing.JButton();
        jbParentesis2 = new javax.swing.JButton();
        jbDivision = new javax.swing.JButton();
        jbMultiplicacion = new javax.swing.JButton();
        jbSuma = new javax.swing.JButton();
        jbMenos = new javax.swing.JButton();
        jbIgual = new javax.swing.JButton();
        jbSigno = new javax.swing.JButton();
        jbDecimal = new javax.swing.JButton();
        jb9 = new javax.swing.JButton();
        jb8 = new javax.swing.JButton();
        jb7 = new javax.swing.JButton();
        jb6 = new javax.swing.JButton();
        jb5 = new javax.swing.JButton();
        jb4 = new javax.swing.JButton();
        jb3 = new javax.swing.JButton();
        jb2 = new javax.swing.JButton();
        jb1 = new javax.swing.JButton();
        jb0 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtDisplay = new javax.swing.JTextArea();

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Calculadora", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Verdana", 0, 12)))); // NOI18N

        jbAC.setBackground(new java.awt.Color(153, 153, 153));
        jbAC.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jbAC.setText("AC");
        jbAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbACActionPerformed(evt);
            }
        });

        jbParentesis1.setBackground(new java.awt.Color(153, 153, 153));
        jbParentesis1.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jbParentesis1.setText("(");
        jbParentesis1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbParentesis1ActionPerformed(evt);
            }
        });

        jbParentesis2.setBackground(new java.awt.Color(153, 153, 153));
        jbParentesis2.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jbParentesis2.setText(")");
        jbParentesis2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbParentesis2ActionPerformed(evt);
            }
        });

        jbDivision.setBackground(new java.awt.Color(255, 102, 0));
        jbDivision.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jbDivision.setText("/");
        jbDivision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDivisionActionPerformed(evt);
            }
        });

        jbMultiplicacion.setBackground(new java.awt.Color(255, 102, 0));
        jbMultiplicacion.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jbMultiplicacion.setText("X");
        jbMultiplicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMultiplicacionActionPerformed(evt);
            }
        });

        jbSuma.setBackground(new java.awt.Color(255, 102, 0));
        jbSuma.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jbSuma.setText("+");
        jbSuma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSumaActionPerformed(evt);
            }
        });

        jbMenos.setBackground(new java.awt.Color(255, 102, 0));
        jbMenos.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jbMenos.setText("-");
        jbMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMenosActionPerformed(evt);
            }
        });

        jbIgual.setBackground(new java.awt.Color(255, 102, 0));
        jbIgual.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jbIgual.setText("=");
        jbIgual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbIgualActionPerformed(evt);
            }
        });

        jbSigno.setBackground(new java.awt.Color(204, 204, 204));
        jbSigno.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jbSigno.setText("(-)");
        jbSigno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSignoActionPerformed(evt);
            }
        });

        jbDecimal.setBackground(new java.awt.Color(204, 204, 204));
        jbDecimal.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jbDecimal.setText(".");
        jbDecimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDecimalActionPerformed(evt);
            }
        });

        jb9.setBackground(new java.awt.Color(204, 204, 204));
        jb9.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jb9.setText("9");
        jb9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb9ActionPerformed(evt);
            }
        });

        jb8.setBackground(new java.awt.Color(204, 204, 204));
        jb8.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jb8.setText("8");
        jb8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb8ActionPerformed(evt);
            }
        });

        jb7.setBackground(new java.awt.Color(204, 204, 204));
        jb7.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jb7.setText("7");
        jb7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb7ActionPerformed(evt);
            }
        });

        jb6.setBackground(new java.awt.Color(204, 204, 204));
        jb6.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jb6.setText("6");
        jb6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb6ActionPerformed(evt);
            }
        });

        jb5.setBackground(new java.awt.Color(204, 204, 204));
        jb5.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jb5.setText("5");
        jb5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb5ActionPerformed(evt);
            }
        });

        jb4.setBackground(new java.awt.Color(204, 204, 204));
        jb4.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jb4.setText("4");
        jb4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb4ActionPerformed(evt);
            }
        });

        jb3.setBackground(new java.awt.Color(204, 204, 204));
        jb3.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jb3.setText("3");
        jb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb3ActionPerformed(evt);
            }
        });

        jb2.setBackground(new java.awt.Color(204, 204, 204));
        jb2.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jb2.setText("2");
        jb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb2ActionPerformed(evt);
            }
        });

        jb1.setBackground(new java.awt.Color(204, 204, 204));
        jb1.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jb1.setText("1");
        jb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb1ActionPerformed(evt);
            }
        });

        jb0.setBackground(new java.awt.Color(204, 204, 204));
        jb0.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jb0.setText("0");
        jb0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb0ActionPerformed(evt);
            }
        });

        jtDisplay.setBackground(new java.awt.Color(0, 0, 0));
        jtDisplay.setColumns(20);
        jtDisplay.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jtDisplay.setForeground(new java.awt.Color(255, 255, 255));
        jtDisplay.setRows(5);
        jScrollPane1.setViewportView(jtDisplay);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jbAC, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jb7, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jbParentesis1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jb8, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jb4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jb5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jb1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jb2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jb0, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbDecimal, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jbParentesis2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jb9, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jb6, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jb3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jbSigno, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbDivision, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbMultiplicacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbSuma, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbMenos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbIgual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAC, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbDivision, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbParentesis2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbParentesis1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb9, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbMultiplicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb8, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbSuma, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbMenos, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbIgual, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbSigno, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbDecimal, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Define la funcionalidad del boton con el numero 2
     * @param evt 
     */
    private void jbParentesis2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbParentesis2ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText(" ) ");
        else
            jtDisplay.append(" ) ");                           
    }//GEN-LAST:event_jbParentesis2ActionPerformed

    /**
     * Define la funcionalidad del boton con el numero 0
     * @param evt 
     */
    private void jb0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb0ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText("0");
        else
            jtDisplay.append("0");
    }//GEN-LAST:event_jb0ActionPerformed

    /**
     * Define la funcionalidad del boton con el numero 9
     * @param evt 
     */
    private void jb9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb9ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText("9");
        else
            jtDisplay.append("9"); 
    }//GEN-LAST:event_jb9ActionPerformed

    /**
     * Define la funcionalidad del boton con el numero 6
     * @param evt 
     */
    private void jb6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb6ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText("6");
        else
            jtDisplay.append("6");
    }//GEN-LAST:event_jb6ActionPerformed

    /**
     * Define la funcionalidad del boton con el numero 3
     * @param evt 
     */
    private void jb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb3ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText("3");
        else
            jtDisplay.append("3");
    }//GEN-LAST:event_jb3ActionPerformed

    /**
     * Define la funcionalidad del boton con el numero 5
     * @param evt 
     */
    private void jb5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb5ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText("5");
        else
            jtDisplay.append("5"); 
    }//GEN-LAST:event_jb5ActionPerformed

    /**
     * Define la funcionalidad del boton con el numero 7
     * @param evt 
     */
    private void jb7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb7ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText("7");
        else
            jtDisplay.append("7");
    }//GEN-LAST:event_jb7ActionPerformed

    /**
     * Define la funcionalidad del boton con el parentesis izquierdo
     * @param evt 
     */
    private void jbParentesis1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbParentesis1ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText(" ( ");
        else
            jtDisplay.append(" ( ");
    }//GEN-LAST:event_jbParentesis1ActionPerformed

    /**
     * Define la funcionalidad del boton para borrar (AC)
     * @param evt 
     */
    private void jbACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbACActionPerformed
        jtDisplay.setText("");
    }//GEN-LAST:event_jbACActionPerformed

    /**
     * Define la funcionalidad del boton de division
     * @param evt 
     */
    private void jbDivisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDivisionActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("=ERROR"))
            jtDisplay.setText(" / ");
        else if(cadena.contains("="))
            jtDisplay.setText(cadena.substring(1) + " / ");
        else
            jtDisplay.append(" / ");
    }//GEN-LAST:event_jbDivisionActionPerformed

    /**
     * Define la funcionalidad del boton con el numero 8
     * @param evt 
     */
    private void jb8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb8ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText("8");
        else
            jtDisplay.append("8");
    }//GEN-LAST:event_jb8ActionPerformed

    /**
     * Define la funcionalidad del boton de multiplicacion
     * @param evt 
     */
    private void jbMultiplicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMultiplicacionActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("=ERROR"))
            jtDisplay.setText(" * ");
        else if(cadena.contains("="))
            jtDisplay.setText(cadena.substring(1) + " * ");
        else
            jtDisplay.append(" * ");  
    }//GEN-LAST:event_jbMultiplicacionActionPerformed

    /**
     * Define la funcionalidad del boton con el numero 4
     * @param evt 
     */
    private void jb4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb4ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText("4");
        else
            jtDisplay.append("4");
    }//GEN-LAST:event_jb4ActionPerformed

    /**
     * Define la funcionalidad del boton de suma
     * @param evt 
     */
    private void jbSumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSumaActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("=ERROR"))
            jtDisplay.setText(" + ");
        else if(cadena.contains("="))
            jtDisplay.setText(cadena.substring(1) + " + ");
        else
            jtDisplay.append(" + ");
    }//GEN-LAST:event_jbSumaActionPerformed

    /**
     * Define la funcionalidad del boton con el numero 1
     * @param evt 
     */
    private void jb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb1ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText("1");
        else
            jtDisplay.append("1");
    }//GEN-LAST:event_jb1ActionPerformed

    /**
     * Define la funcionalidad del boton con el numero 2
     * @param evt 
     */
    private void jb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb2ActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText("2");
        else
            jtDisplay.append("2");
    }//GEN-LAST:event_jb2ActionPerformed

    /**
     * Define la funcionalidad del boton de resta
     * @param evt 
     */
    private void jbMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMenosActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("=ERROR"))
            jtDisplay.setText(" - ");
        else if(cadena.contains("="))
            jtDisplay.setText(cadena.substring(1) + " - ");
        else
            jtDisplay.append(" - ");
    }//GEN-LAST:event_jbMenosActionPerformed

    /**
     * Define la funcionalidad del boton de punto decimal
     * @param evt 
     */
    private void jbDecimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDecimalActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText(".");
        else
            jtDisplay.append(".");
    }//GEN-LAST:event_jbDecimalActionPerformed

    /**
     * Define la funcionalidad del boton de cambio de signo
     * @param evt 
     */
    private void jbSignoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSignoActionPerformed
        String cadena;
        
        cadena = jtDisplay.getText();
        if(cadena.contains("="))
            jtDisplay.setText(" -");
        else
            jtDisplay.append(" -");
    }//GEN-LAST:event_jbSignoActionPerformed

    /**
     * Determina si un String x es un operador
     * @param x: String a evaluar
     * @return <ul>
     * <li>true: si x es un operador</li>
     * <li>false: si x no es un operador</li>
     * </ul>   
     */
    public boolean esOperador(String x){
        ArrayList<String> operadores;
        
        operadores = new ArrayList<String>();
        operadores.add("+");
        operadores.add("-");
        operadores.add("*");
        operadores.add("/");
        return operadores.contains(x);
    }

    /**
     * Determina si hay algun problema de sintaxis con los operadores  
     * @param analizar: un arreglo de String
     * @param longitud: la longitud del arreglo
     * @return <ul>
     * <li>true: si no hay ningun problema</li>
     * <li>false: <ol>
     * <li>Si hay dos operadores juntos</li>
     * <li>Si hay operador sin operando antes o despues</li>
     * </ol>
     * </ul>  
     * @see esOperador
     */
    public boolean verificaOperadoresRepetidos(String[] analizar, int longitud){
        int i;
        boolean verificacion;;
        
        verificacion = true;
        i = 0;
        while(i < longitud && verificacion){
            if(esOperador(analizar[i])){
                if(i == 0)
                    verificacion = false;
                else if(i == longitud - 1)
                    verificacion = false;
                else if(esOperador(analizar[i + 1]))
                    verificacion = false;
            }
            i++;
        }
        return verificacion;
    } 
    
    /**
     * Determina si hay algun problema de sintaxis con los decimales 
     * @param analizar: un arreglo de String
     * @param longitud: la longitud del arreglo
     * @return <ul>
     * <li>true: si no hay ningun problema</li>
     * <li>false: <ol>
     * <li>Si hay dos decimales en el mismo numero</li>
     * <li>Si hay un decimal pegado a un operador a la derecha</li>
     * <li>Si hay un decimal solo</li>
     * </ol>
     * </ul>  
     * @see esOperador
     */
    public boolean verificaDecimales(String analizar, int longitud){
        PilaA<Character> pila;
        int i, digitos;
        boolean verificacion;
        char ch;
        
        pila = new PilaA<Character>();
        i = 0;
        verificacion = true;
        digitos = 0;
        while(i < longitud && verificacion){
            ch = analizar.charAt(i);
            if(ch == '.')
                if(pila.isEmpty()){
                    pila.push('.');
                    digitos = 0;
                }//end inner-if
                else
                    verificacion = false;
            else if(isDigit(ch))
                digitos++;
            else if(esOperador(valueOf(ch))){
                if(digitos == 0 && !pila.isEmpty())
                    verificacion = false;
                else if(!pila.isEmpty())
                    pila.pop();
                digitos = 0;      
            }
            i++;
        }// end while
        if(verificacion)
            if(!pila.isEmpty() && digitos == 0)
                verificacion = false;
        return verificacion;
    }
    
    /**
     * Determina si hay algun problema de sintaxis con los perentesis 
     * @param analizar: un arreglo de String
     * @param longitud: la longitud del arreglo
     * @return <ul>
     * <li>true: si no hay ningun problema</li>
     * <li>false: <ol>
     * <li>Si hay un perentesis izquierdo sin parentesis derecho</li>
     * <li>Si hay un parentesis derecho sin izquierdo</li>
     * </ol>
     * </ul>  
     */
    public boolean verificaParentesis(String[] analizar, int longitud){
        PilaA<Character> pila;
        int i;
        boolean verificacion;
        
        pila = new PilaA<Character>();
        i = 0;
        verificacion = true;
        while(i < longitud && verificacion){
            if(analizar[i].equals("("))
                  pila.push('(');
            else if(analizar[i].equals(")"))
                if(pila.pop() == null)
                    verificacion = false;
            i++;
        }//end while
        return verificacion && pila.isEmpty();    
    }
    
    /**
     * Determina si hay algun problema con los signos negativos 
     * @param analizar: un arreglo de String
     * @param longitud: la longitud del arreglo
     * @return <ul>
     * <li>true: si no hay ningun problema</li>
     * <li>false: si hay un signo negativo sin operador cuando corresponde</li>
     * </ul>  
     */
    public boolean verificaNegativos(String[] analizar, int longitud){
        boolean verificacion;
        int i;
        String analizado;
        
        i = 0;
        verificacion = true;
        while(i < longitud && verificacion){
            analizado = analizar[i];
            if(analizado.length() > 1)
                if(Double.parseDouble(analizado) < 0)
                    if(i > 0)
                        if(analizar[i -1].length() > 1 || isDigit(analizar[i -1].charAt(0)))
                            verificacion = false;
            i++;
        }//end while
        return verificacion;
    }
    
    /**
     * Determina la prioridad de operador comparda con los 4 operadores. 
     * Este metodo asume que ya se determino que el parametro es un operador
     * +, -, * o /
     * @param operador: operador para el cual se quiere saber la prioridad
     * @return <ul>
     * <li>1: si el operador es + o -</li>
     * <li>2: si el operador es * o /</li>
     * </ul>  
     */
    public int prioridadOperador(String operador){
        int prioridad;
        
        prioridad = 1;
        if(operador.equals("*") || operador.equals("/"))
            prioridad = 2;
        return prioridad;       
    }
    
    /**
     * Determina si un String se puede convertir en double
     * @param value: String a evaluar
     * @return<ul>
     * <li>true: si value puede ser interpretado como double</li>
     * <li>false: si value no puede ser interpretado como double</li>
     * </ul> 
     */
    public boolean esDouble(String value) {
        boolean convierte;
        
        try {
            Double.parseDouble(value);
            convierte = true;
        } catch (NumberFormatException e) {
            convierte = false;
        }
        return convierte;
    }
    
    /**
     * Convierte una operacion en notacion infija a una en notacion postfija
     * @param tokens: arreglo de String que contiene la operacion en notacion
     * infija
     * @return: la operacion en notacion postfija
     * @see esDouble
     * @see prioridadOperador
     */
    public String invierteNotacion(String[] tokens){
        int i, longitud;
        StringBuilder postfija;
        String elementosStr;
        PilaA<String> pila;
        
        pila = new PilaA<String>();
        postfija = new StringBuilder();
        longitud = tokens.length;
        for(i = 0; i < longitud; i++){
            elementosStr = tokens[i];
            if(esDouble(elementosStr))
               postfija.append(elementosStr + " ");
            else if(elementosStr.equals("("))
                    pila.push(elementosStr);
            else if(elementosStr.equals(")")){
                while(!pila.isEmpty() && !pila.peek().equals("("))
                    postfija.append(pila.pop() + " ");
                pila.pop();//sacar (
            }//end else-if
            else{
                while(!pila.isEmpty() && !pila.peek().equals("(") && prioridadOperador(elementosStr) <= prioridadOperador(pila.peek()))
                    postfija.append(pila.pop() + " ");
                pila.push(elementosStr);
            }      
        }// end for
        while(!pila.isEmpty())
            postfija.append(pila.pop() + " ");
        return postfija.toString();
    }
    
    /**
     * Evalua una operacion en notacion postfija 
     * @param postfija: arreglo de String que contiene la operacion en notacion
     * infija
     * @return: resultado de la operacion postfija
     * @see esDouble
     */
    public double evaluaPostfija(String[] postfija){
        PilaA<Double> pila;
        int longitud, i;
        double operando1, operando2;
        String evaluando;
       
        pila = new <Double>PilaA();
        longitud = postfija.length;
        for(i = 0; i < longitud; i++){
            evaluando = postfija[i];
            if(esDouble(evaluando))
                pila.push(Double.parseDouble(evaluando));
            else{
                operando1 = pila.pop();
                operando2 = pila.pop();
                if(evaluando.equals("+"))
                    pila.push(operando2 + operando1);
                else if(evaluando.equals("-"))
                    pila.push(operando2 - operando1);
                else if(evaluando.equals("*"))
                    pila.push(operando2 * operando1);
                else
                    pila.push(operando2 / operando1);
            }//end else        
        }//end for
        return pila.pop();
    }
    
    /**
     * Define la funcionalidad del boton de igual
     * @param evt 
     */
    private void jbIgualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbIgualActionPerformed
        String cadena, postfija, tokens[], respuestaString;
        int longitud;
        double respuestaNumerica;
        
        cadena = jtDisplay.getText();
        if(cadena.length() > 0){
            tokens = cadena.trim().split("[ \\  ]+");
            longitud = tokens.length;
            if(verificaOperadoresRepetidos(tokens, longitud) && verificaDecimales(cadena, cadena.length()) && verificaParentesis(tokens, longitud) && verificaNegativos(tokens, longitud)){
                postfija = invierteNotacion(tokens);
                respuestaNumerica = evaluaPostfija(postfija.split(" "));
                respuestaString = valueOf(respuestaNumerica);
            }//end inner-if
            else
                respuestaString = "ERROR"; 
        }//end outter-if    
        else
            respuestaString = "";
        jtDisplay.setText("=" + respuestaString);
    }//GEN-LAST:event_jbIgualActionPerformed

    /**
     * main de CalculadoraVisual
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculadoraVisual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculadoraVisual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculadoraVisual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculadoraVisual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculadoraVisual().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton jb0;
    private javax.swing.JButton jb1;
    private javax.swing.JButton jb2;
    private javax.swing.JButton jb3;
    private javax.swing.JButton jb4;
    private javax.swing.JButton jb5;
    private javax.swing.JButton jb6;
    private javax.swing.JButton jb7;
    private javax.swing.JButton jb8;
    private javax.swing.JButton jb9;
    private javax.swing.JButton jbAC;
    private javax.swing.JButton jbDecimal;
    private javax.swing.JButton jbDivision;
    private javax.swing.JButton jbIgual;
    private javax.swing.JButton jbMenos;
    private javax.swing.JButton jbMultiplicacion;
    private javax.swing.JButton jbParentesis1;
    private javax.swing.JButton jbParentesis2;
    private javax.swing.JButton jbSigno;
    private javax.swing.JButton jbSuma;
    private javax.swing.JTextArea jtDisplay;
    // End of variables declaration//GEN-END:variables
}
